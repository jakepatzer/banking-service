// Code generated by MockGen. DO NOT EDIT.
// Source: ./account_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	internal "github.com/jakepatzer/banking-service/lambda/internal"
)

// MockAccountManager is a mock of AccountManager interface.
type MockAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerMockRecorder
}

// MockAccountManagerMockRecorder is the mock recorder for MockAccountManager.
type MockAccountManagerMockRecorder struct {
	mock *MockAccountManager
}

// NewMockAccountManager creates a new mock instance.
func NewMockAccountManager(ctrl *gomock.Controller) *MockAccountManager {
	mock := &MockAccountManager{ctrl: ctrl}
	mock.recorder = &MockAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountManager) EXPECT() *MockAccountManagerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountManager) CreateAccount(ctx context.Context, accountID string, createAccountInput internal.CreateAccountInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, accountID, createAccountInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountManagerMockRecorder) CreateAccount(ctx, accountID, createAccountInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountManager)(nil).CreateAccount), ctx, accountID, createAccountInput)
}

// DeleteAccount mocks base method.
func (m *MockAccountManager) DeleteAccount(ctx context.Context, accountID string, deleteAccountInput internal.DeleteAccountInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, accountID, deleteAccountInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountManagerMockRecorder) DeleteAccount(ctx, accountID, deleteAccountInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountManager)(nil).DeleteAccount), ctx, accountID, deleteAccountInput)
}

// GetBalance mocks base method.
func (m *MockAccountManager) GetBalance(ctx context.Context, accountID string, getBalanceInput internal.GetBalanceInput) (internal.GetBalanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, accountID, getBalanceInput)
	ret0, _ := ret[0].(internal.GetBalanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockAccountManagerMockRecorder) GetBalance(ctx, accountID, getBalanceInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAccountManager)(nil).GetBalance), ctx, accountID, getBalanceInput)
}

// ListAccounts mocks base method.
func (m *MockAccountManager) ListAccounts(ctx context.Context, accountID string, listAccountsInput internal.ListAccountsInput) (internal.ListAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, accountID, listAccountsInput)
	ret0, _ := ret[0].(internal.ListAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountManagerMockRecorder) ListAccounts(ctx, accountID, listAccountsInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountManager)(nil).ListAccounts), ctx, accountID, listAccountsInput)
}

// ListAccountsAdmin mocks base method.
func (m *MockAccountManager) ListAccountsAdmin(ctx context.Context, listAccountsInput internal.ListAccountsInput) (internal.ListAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsAdmin", ctx, listAccountsInput)
	ret0, _ := ret[0].(internal.ListAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsAdmin indicates an expected call of ListAccountsAdmin.
func (mr *MockAccountManagerMockRecorder) ListAccountsAdmin(ctx, listAccountsInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsAdmin", reflect.TypeOf((*MockAccountManager)(nil).ListAccountsAdmin), ctx, listAccountsInput)
}

// Transfer mocks base method.
func (m *MockAccountManager) Transfer(ctx context.Context, srcAccountID string, transferInput internal.TransferInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, srcAccountID, transferInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockAccountManagerMockRecorder) Transfer(ctx, srcAccountID, transferInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockAccountManager)(nil).Transfer), ctx, srcAccountID, transferInput)
}
